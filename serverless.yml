service: task-storagegateway-refreshcache
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: dotnetcore3.1
  memorySize: 128
  timeout: 15
  region: us-east-1
  profile: ss_dan #default | ss_dan | ss_serviceaccount
  #stage: dev
  #ref: https://www.serverless.com/framework/docs/providers/aws/guide/credentials/

  iamRoleStatements:
      - Effect: "Allow"
        Action:
          - ssm:GetParameter
        Resource:
          Fn::Join:
            - ''
            -
              - 'arn:aws:ssm:'
              - Ref: AWS::Region
              - ':'
              - Ref: AWS::AccountId
              - ':parameter/slack-webhookurl-decastring/*'
      - Effect: "Allow"
        Action:
          - storagegateway:*
        Resource: '*'

  # define service wide environment variables
  environment:
    # Read an encrypted value (~true) from AWS Systems Manager (SSM)
    SlackWebhookUrl: ${ssm:/slack-webhookurl-decastring~true}

package:
  artifact: bin/Release/netcoreapp3.1/eventtriggers.zip
  exclude:
    - sampledata/**

functions:
  storagegatewayrefreshcache:
    handler: EventTriggers::EventTrigger.Handler::StorageGatewayRefreshCache
    events: 
      - schedule: 
          name: storagegateway-refreshcache-ssds
          #description: 'your scheduled rate event description'
          #rate: rate(5 minutes)
          rate: cron(0 20 ? * 7 *)
          enabled: true
          input: 
            FileShareARN: arn:aws:storagegateway:us-east-1:896456252861:share/share-C2C070A9value1
            FolderList: [/ssds]
            Recursive: true
  listfileshares:
    handler: EventTriggers::EventTrigger.Handler::ListFileShares
    events:
      - schedule:
          name: storagegateway-listfileshares
          rate: rate(5 minutes)
          enabled: false
          input:
            GatewayARN: arn:aws:storagegateway:us-east-1:896456252861:gateway/sgw-C849AEA1
            Limit: 
            Marker: 

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
